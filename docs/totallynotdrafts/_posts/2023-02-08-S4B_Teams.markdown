---
layout: post
title:  "How your messenger used for internal communication might compromise your company"
date:   2023-02-08 18:44:17 +0200
author: PfiatDe
excerpt_separator: <!--more-->
---

# How your messenger used for internal communication might compromise your company

In this blog post some techniques about the messengers Microsoft Skype-for-Business (S4B) and Microsoft Teams regarding attacking a company network are shown.

Just some well-known techniques, which work way too often and companies and employees are not aware off. The success rate for this kind of phishing / social engineering is very high.

# tl;dr

* S4B in a self hosted version allows timebased user-enumeration and password-spraying against the complete Active Directory, not only users with a Skype account
* S4B, if external communication is enabled, allows attacker to send messages directly to employees
* Teams, even if external communication is prohibited, allows user-enumeration via E-Mail address, 
* Teams, if external communication is enabled, allows user-enumeration, status gathering and an attacker to send messages directly to employees
* If an alias address is in use, e.g. `<<ADUSER>>.company.org`, Teams and S4B will happily resolve the AD-User to First and Last Name


# Introduction

When talking about Skype-for-Business (S4B) also the predecessor Lync is likely affected.


# S4B

## Detection of Skype for Business (S4B)

S4B can often detected via a subdomain called lyncdiscover.company.org. If the domain exist, it will typical return a XML file, telling where the S4B Server can be found.

```
(curl https://lyncdiscover.##OnPrem##.com).rawcontent
HTTP/1.1 200 OK
X-MS-Server-Fqdn: SI0PLY01.de.##OnPrem##.com
[...]

{"_links":{"self":{"href":"https://si-pool1-webext.##OnPrem##.com/Autodiscover/AutodiscoverService.svc/root?originalDomain=##OnPrem##.com"},"user":{"href":"https://si-pool1-webext.##OnPrem##.com/Autodiscover/AutodiscoverService.svc/root/oauth/user?originalDomain=##OnPrem##.com"},"xframe":{"href":"https://si-pool1-webext.##OnPrem##.com/Autodiscover/XFrame/XFrame.html"}}}
```

If S4B is hosted by Microsoft, the response would look like this:

```
(curl http://lyncdiscover.##OnMS##.com).rawcontent
HTTP/1.1 200 OK
[...]

{"_links":{"self":{"href":"https://webdirgb1.online.lync.com/Autodiscover/AutodiscoverService.svc/root?originalDomain=##OnMS##.com"},"xframe":{"href":"https://webdir1E.online.lync.com/Autodiscover/AutodiscoverService.svc/root/xframe"},"redirect":{"href":"https://webdir1E.online.lync.com/Autodiscover/AutodiscoverService.svc/root?originalDomain=##OnMS##.com"}}}
```

If you follow the link to the S4B server you may get a `403 - Forbidden: Access is denied.`. You can still identify the S4B by the favicon, or you could just try the `/scheduler` endpoint. This brings up a wonderful login page for internal ActiveDirectory credentials.
![Scheduler endpoint](/assets/media/S4B/Skype_Scheduler2.png){:width="100%"} 
*Scheduler endpoint*


## NTLM Authentication
If a S4B instance is onprem, there are several endpoints, which allows NTLM authentication. 

An endpoint allowing NTLM authentication leaks some useful information for an attacker. With the tool NTLMRecon or also with an good old nmap script we can gather the hostname and more important the internal domain name (FQDN).

![NMAP](/assets/media/S4B/NTLM_Auth_2.png){:width="100%"}
*Extracting Domaindata with Nmap*
![NTLMRecon](/assets/media/S4B/NTLM_Auth.png){:width="100%"} 
*Extracting Domaindata with NTLMRecon*

Furthermore, NTLM Authentication endpoints are great for password spraying, as the speed is good and also multithreading is not a problem.

## User enumeration

If we already know the user syntax by OSINT we can just validate accounts here. One big plus of S4B in a selfhosted environment is, that it is querying against the complete ActiveDirectory and also reporting users which have definetly no skype account, like the krbtgt user which can be used to verify if everything is working.

Tools like lyncsmasher come in helpfully here, or we can also just use burp to measure the response time. A valid user will have a significant shorter response time then an invalid one. Typically the difference should be about 500ms for valid user to 5s for an invalid. If the account is disabled, S4B will mention this in a message.

Please note, that S4B will typically take either the E-Mail address or the username with the domain prefix, like `AD-Customer\MMustermann`

## Statistically likely

If we don't know the usersyntax, or just want to gather more users, we can use special lists, like the repo [https://github.com/insidetrust/statistically-likely-usernames](https://github.com/insidetrust/statistically-likely-usernames) , or gather our own lists, for example with typical lastnames for that country from wikipedia. To add some variation, we can also try tools like masher to have a bigger variation of accounts. 

Tool: masher

Be aware, that if there is a custom prefix (e.g. DE1) or suffix to the username, this technique might fail.

## Password spraying

Skype will respond in various ways to us.

* If the user does not exist, the response will be typically around 5s, or at least significant longer then when we have a valid user.
* If we have a wrong password, skype will tell us
* If the account is disabled, Skype will tell us
* If we have valid credentials, but the account does not have a skype account we well get a message
* If we can login

![Pew pew pew](/assets/media/S4B/futurama-fry.gif){:width="100%"}
*Pew pew pew*

## Got creds?
S4B does not support MFA by default, so you can login for example under the `/scheduler` endpoint. Here, you have the possibility do some easy user enumeration by using the `check names` feature of a meeting.
You can upload a few thousand names here and just see which resolves. The endpoint will happily translate the AD User to an E-Mail if there is an account connected.

![Skype scheduler](/assets/media/S4B/Skype_Scheduler.png){:width="100%"}
*Skype scheduler*

And remember to check [https://aka.ms/mfasetup](https://aka.ms/mfasetup), an attacker controlled added MFA is quite useful.

# Skype / Teams hosted by Microsoft

As Microsoft [announced in 2021 that they are changing the default setting for external communication in Teams](https://techcommunity.microsoft.com/t5/microsoft-teams-blog/microsoft-ignite-fall-2021-innovations-coming-to-microsoft-teams/ba-p/2824127) Threat actors and RedTeams all over the world celebrated. This opened a new door for highly effective phishing attacks. External communication is now allowed by default and must actively turned off.

## Testtenant
To attack such a setting, we need an AAD with a Teams account. The free version of Teams, does work for enumeration, but will likely not work for communication or show at least more warnings.

Microsoft offers a possibilities to register a development AAD. [https://developer.microsoft.com/en-us/microsoft-365/dev-program](https://developer.microsoft.com/en-us/microsoft-365/dev-program)

![Developer-AAD](/assets/media/S4B/Developer-AAD.png){:width="100%"}
*Developer-AAD* 
Sounds great, doesn't it :)

There are some restrictions in place, for example it is not possible to share public available files. However, the TEAMS service is running great and we can (ab)use this to compromise our target.

Sidenote: The TestAAD also allows sending E-Mails. However the score of the outgoing SMTP is so bad, that Microsoft itself does not accept those E-Mails for other tenants. But of course, there might be a lot of companies out there, still accepting those E-Mails.

## Leak of user information

Sometimes Skype does allow communication from external users, meaning from another tenant. By using TEAMS it is also possible to query skype. Therefore we can check from a tenant with access to teams if there is external communication allowed.

If the external Communication is allowed, we can gather the Status of the user (available, busy, dnd, Out-of-Office). 

![Developer-AAD](/assets/media/S4B/Teams_Userenumeration_Status.png){:width="50%"} 
*User Enumeration* 

But even if not, we still can verify E-Mails against the company, as Teams will return a different message if the user exists. ![Developer-AAD](/assets/media/S4B/Teams_Userenumeration.png){:width="100%"}
*User Enumeration* 


## Skype or Teams phishing (skyshing / tishing)

Sometimes Skype does allow communication from external users, meaning from another tenant. As Skype is typically regarded as internal communication tool this is a high efficent phishing vector!

Additional interesting feature is, that the message will be sent as email, if there was no reaction over some time. This allows us to send a email, technically coming from the own Skype server to the user. This mail will typical not be flagged as external and also not land in quarantine.

### Faking a contact person

With our Developer AAD, we can add users like we want to. For example we can add some user called ithelpdesk@company.com as nickname. Unfortunately we can not simply improve this, by adding a generic company logo as profile picture, as the profile picture is not shared across the tenants.

![Developer-AAD](/assets/media/S4B/Teams_Identity_1.png){:width="100%"} 
*Showing the Identity* 

If we start a group chat instead of a one-to-one chat this is getting even worse. A quite effective attack is attacking two employees at the same time.



If we have a look at the account this is quite confusing and does trick people into believing the identity of the account. Only by hoovering the account preview there will be a full address like `it-helpdeskcompany@t0#####.onmicrosoft.com` which is still quite trustworthy, as `onmicrosoft.com` emails are used for every AAD in background. 
Furthermore, as the name of the AAD can be choosen during the setup phase, it is also possible to toke something like `selfservice-company.onmicrosoft.com`.

### Spoofing

S4B / Teams does also not offer protection against spoofing things in messages. For example a simple HTML spoofing is possible. Meaning the text and the link are pointing to different sites.
By looking at the requests causing a new message to send it is quite obvious how to change the tags.
![Developer-AAD](/assets/media/S4B/Teams_Spoof_2.png){:width="100%"}
*Spoofing a link* 

By doing this, it is possible to craft messages, which open a malicious URL despite showing a company owned URL.
![Developer-AAD](/assets/media/S4B/Teams_Spoof_1.png){:width="100%"}
*Spoofed link in message* 

This is a very well-known attack vector for e-mails and most appliances are detecting this technique for e-mails.



# Analysis of TOP DAX companies

To further provide some data about the possible risk the DAX-Companies have been quickly analyzed.
The DAX (Deutscher Aktienindex (German stock index) is the most important stock market index consisting of 40 major German companies:

* Adidas
* Airbus
* Allianz
* BASF
* Bayer
* Beiersdorf
* BMW
* Brenntag
* Continental
* Covestro
* Daimler Truck
* Deutsche Bank
* Deutsche Börse
* Deutsche Post
* Deutsche Telekom
* E.ON
* Fresenius
* Fresenius Medical Care
* Hannover Rück
* HeidelbergCement
* HelloFresh
* Henkel
* Infineon
* Linde
* Mercedes-Benz Group
* Merck
* MTU Aero Engines
* Münchener Rück
* Porsche SE
* Puma
* Qiagen
* RWE
* SAP
* Sartorius
* Siemens
* Siemens Healthineers
* Symrise
* Volkswagen
* Vonovia
* Zalando

Those companies have been analyzed about their S4B or Teams infrastructure. The following very simple methodic was used.

## Find the main Domain and some Mails

To gather some emails and the main domain common third party tools can be used. Just to name some: phonebook.cz, ... Just take the TLD with the most hits, in most cases this is good.

![Developer-AAD](/assets/media/S4B/Enum_Emails.png){:width="100%"}
*Collect some emails for checks* 

## Check for Lync / S4B

Enumerate some subdomains to identify Lync / S4B installations. The most common subdomains are:

* lyncdiscover.company.org
* meet.company.org
* dialin.company.org
* lync-fe.company.org

The following script was used:

```powershell
add-type @"
using System.Net;
using System.Security.Cryptography.X509Certificates;
public class TrustAllCertsPolicy : ICertificatePolicy {
    public bool CheckValidationResult(
        ServicePoint srvPoint, X509Certificate certificate,
        WebRequest request, int certificateProblem) {
        return true;
    }
}
"@
$AllProtocols = [System.Net.SecurityProtocolType]'Ssl3,Tls,Tls11,Tls12'
[System.Net.ServicePointManager]::SecurityProtocol = $AllProtocols
[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy


$dax = Import-Csv D:\dax.csv # A list with the DAX domains
$dax | ForEach-Object {$u = "https://lyncdiscover.$($_.domain)"; $u;  iwr -uri $u}
$dax | ForEach-Object {$u = "https://meet.$($_.domain)"; $u;  iwr -uri $u}
$dax | ForEach-Object {$u = "https://dialin.$($_.domain)"; $u;  iwr -uri $u}
$dax | ForEach-Object {$u = "https://lync-fe.$($_.domain)"; $u;  iwr -uri $u}

```

## Identify if external collaboration is enabled

By quering the endpoint
`https://teams.microsoft.com/api/mt/part/emea-03/beta/users/FIRST.LAST@company.com/externalsearchv3?includeTFLUsers=true` 
with the adjusted data from the e-mail gathering, or by just using the search field in the webclient, we can detect what setup is in use.
A typical result will look like this.
![Developer-AAD](/assets/media/S4B/Teams_Settings_6.png){:width="100%"}
*Result of the external collaboration* 


## Outcome

The results of the checks are a little bit suprising:

* 24 / 40 still have S4B in place, some hosted by Microsoft (online.lync.com).
* 08 / 40 have a self hosted and reachable S4B instance
* 35 / 40 use Teams or Teams <-> S4B interaction
* 10 / 40 allow external tenant communication

## Detection & Mitigation

It is necessary to differ here.
The password spraying can get detected by logging the failed attempts. As the lockout policy will likely not trigger, it is important to monitor a bigger timeframe, like five failed attempts for one account in 24h.
Tools like Microsofts Defender Identity can support here.

There is no protection against the Teams E-Mail enumeration, beside not to use Teams. However a company E-Mail address should not be considered as secret, as there are several ways to gather and verify them.

To protect against tishing, the easiest solution is to block external communication and use the allowlist Feature provided by MS.

Those settings can be made in the Teams administration. Same goes for S4B.

![Developer-AAD](/assets/media/S4B/Teams_External_Settings.png){:width="100%"}
*Teams settings for external communication* 

And as usual, if there is no technical countermeassure, users should be aware of the risk.

## Outro

I hope you enjoyed the read. Thanks for a lot of great research to the tool developers and much more people!

# Conclusion

Microsofts S4B and Teams delivers an attacker a good attack surface. At a minimum it is possible to enumerate email addresses and therefore validate users collected from OSINT. If there is a selfhosted S4B, it allows password spraying against the ActiveDirectory and will leak the FQDN of the server. If external tenant communication is allowed, an attacker might go for tishing, which is very effective, as mot employees see Teams as an internal messenger and therefore trust it. The fact, that for example the username or links can be spoofed increases the chances of an attacker to deliver an successfull attack.

It is strange, that the security features, which were implemented for email appliances over decades are just ignorred for messengers and the decision from Microsoft to enable the external communication by default is highly questionable from a security perspective.

# Links

Work and inspiration from others:

* [https://mrd0x.com/microsoft-teams-abuse/](https://mrd0x.com/microsoft-teams-abuse/)
* [https://www.mdsec.co.uk/2017/04/penetration-testing-skype-for-business-exploiting-the-missing-lync/](https://www.mdsec.co.uk/2017/04/penetration-testing-skype-for-business-exploiting-the-missing-lync/)
* [https://www.trustedsec.com/blog/attacking-self-hosted-skype-businessmicrosoft-lync-installations/](https://www.trustedsec.com/blog/attacking-self-hosted-skype-businessmicrosoft-lync-installations/)
* [https://github.com/nyxgeek/lyncsmash](https://github.com/nyxgeek/lyncsmash)
* [https://github.com/insidetrust/statistically-likely-usernames](https://github.com/insidetrust/statistically-likely-usernames)
* [https://www.sprocketsecurity.com/resources/how-to-bypass-mfa-all-day](https://www.sprocketsecurity.com/resources/how-to-bypass-mfa-all-day)